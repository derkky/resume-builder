{"version":3,"sources":["components/personalDetailsInput.js","components/descriptionInput.js","components/educationDetailsInput.js","components/workDetailsInput.js","components/addInfoInput.js","components/resumeHeader.js","components/educationSection.js","components/ccaDetailsInput.js","components/workSection.js","components/ccaSection.js","components/addInfoSection.js","App.js","reportWebVitals.js","index.js"],"names":["PersonalDetailsInput","props","className","htmlFor","type","name","onChange","updatePersonalInfo","DescriptionInput","descriptionList","map","description","updateDescription","id","onClick","deleteDescription","addDescription","EducationDetailsInput","schoolList","school","Fragment","deleteSchool","updateSchool","updatePresent","addSchool","WorkDetailsInput","workList","work","deleteWork","updateWork","addWork","AddInfoInput","ResumeHeader","personalInfo","phoneNumber","email","website","EducationSection","startDate","Date","start","toLocaleDateString","year","month","endDate","end","schoolName","present","course","cap","text","CcaDetailsInput","ccaList","cca","deleteCca","updateCca","addCca","WorkSection","company","jobTitle","CcaSection","organisation","position","AddInfoSection","addInfoList","info","App","useState","setPersonalInfo","uniqid","educationInfo","setEducationInfo","workInfo","setWorkInfo","ccaInfo","setCcaInfo","addInfo","setAddInfo","ev","value","target","index","findIndex","dataset","schoolid","update","$set","now","filter","parentid","$push","descriptionid","descripIndex","workid","ccaid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e38f99c6.chunk.js","sourcesContent":["const PersonalDetailsInput = (props) => {\r\n    return (\r\n        <div className=\"inputContainer\">\r\n          <h2> Personal Details </h2>\r\n          <label htmlFor=\"name\"> Name </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={props.updatePersonalInfo}\r\n          />\r\n          <label htmlFor=\"phoneNumber\"> Phone Number </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"phoneNumber\"\r\n            onChange={props.updatePersonalInfo}\r\n          />\r\n          <label htmlFor=\"email\"> Email </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"email\"\r\n            onChange={props.updatePersonalInfo}\r\n          />\r\n          <label htmlFor=\"website\"> Website </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"website\"\r\n            onChange={props.updatePersonalInfo}\r\n          />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonalDetailsInput","const DescriptionInput = (props) => {\r\n    return (\r\n        <div className=\"descriptionInput\">\r\n            <label> Description </label>\r\n            {props.descriptionList.map((description) => {\r\n                return(\r\n                <div key={description.id}>\r\n                    <input type=\"text\" \r\n                        className=\"descriptionTextInput\" \r\n                        onChange={props.updateDescription}\r\n                        data-parentid={props.id} \r\n                        data-descriptionid={description.id}/>\r\n                    <button \r\n                        className=\"deleteButton\" \r\n                        data-parentid={props.id} \r\n                        data-descriptionid={description.id} \r\n                        onClick={props.deleteDescription}> Delete</button>\r\n                </div>\r\n                )\r\n            }\r\n            )}\r\n            <button className=\"addButton\" data-parentid={props.id} onClick={props.addDescription}> Add Description </button>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DescriptionInput","import React from \"react\";\r\nimport DescriptionInput from \"./descriptionInput\"\r\n\r\nconst EducationDetailsInput = (props) => {\r\n\r\n  return (\r\n      <div className=\"inputContainer\">\r\n        <h2> Education </h2>\r\n        {props.schoolList.map((school) => {\r\n          return(\r\n            <React.Fragment key={school.id}>\r\n              <label> \r\n                  <div>\r\n                  School Name\r\n                  <button \r\n                      className=\"deleteButton\"\r\n                      data-schoolid={school.id}\r\n                      onClick={props.deleteSchool}\r\n                  > Delete School </button>\r\n                  </div> \r\n              </label>\r\n              <input\r\n                  type=\"text\"\r\n                  name=\"schoolName\" \r\n                  data-schoolid={school.id}\r\n                  onChange={props.updateSchool}\r\n              />\r\n              <label> Start Date </label>\r\n              <input\r\n                  type=\"month\"\r\n                  name=\"start\"\r\n                  data-schoolid={school.id}\r\n                  onChange={props.updateSchool}\r\n              />\r\n              <label> End Date </label>\r\n              <div className=\"endDateInput\"> \r\n                <input\r\n                    type=\"month\"\r\n                    name=\"end\"\r\n                    data-schoolid={school.id}\r\n                    onChange={props.updateSchool}\r\n                />\r\n                <div>\r\n                    <input \r\n                        type=\"checkbox\"\r\n                        data-schoolid={school.id}\r\n                        onClick={props.updatePresent}/>\r\n                    <label> Present </label>\r\n                </div>\r\n              </div>\r\n              <label> Course Title </label>\r\n              <input\r\n                  type=\"text\"\r\n                  name=\"course\"\r\n                  data-schoolid={school.id}\r\n                  onChange={props.updateSchool}\r\n              />\r\n              <label> CAP </label>\r\n              <input\r\n                  type=\"text\"\r\n                  name=\"cap\"\r\n                  data-schoolid={school.id}\r\n                  onChange={props.updateSchool}\r\n              />    \r\n              <DescriptionInput \r\n                  id={school.id} \r\n                  descriptionList={school.descriptionList} \r\n                  addDescription={props.addDescription} \r\n                  deleteDescription={props.deleteDescription}\r\n                  updateDescription={props.updateDescription}/>\r\n            </React.Fragment>  \r\n            )})}\r\n        <button className=\"addButton\" onClick={props.addSchool}> Add school </button>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default EducationDetailsInput","import React from \"react\"\r\nimport DescriptionInput from \"./descriptionInput\"\r\n\r\nconst WorkDetailsInput = (props) => {\r\n    return(\r\n        <div className=\"inputContainer\">\r\n          <h2> Working Experience </h2>\r\n          {props.workList.map(work => {\r\n            return(\r\n              <React.Fragment key={work.id}>\r\n                <label> \r\n                <div>\r\n                  Company\r\n                  <button \r\n                    className=\"deleteButton\"\r\n                    data-workid={work.id}\r\n                    onClick={props.deleteWork}\r\n                  > Delete Work </button>\r\n                </div> \r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"company\"\r\n                  data-workid={work.id}\r\n                  onChange={props.updateWork}\r\n                />\r\n                <label> Job Title </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"jobTitle\"\r\n                  data-workid={work.id}\r\n                  onChange={props.updateWork}\r\n                />\r\n                <label> Start Date </label>\r\n                <input\r\n                  type=\"month\"\r\n                  name=\"start\"\r\n                  data-workid={work.id}\r\n                  onChange={props.updateWork}\r\n                />\r\n                <label> End Date </label>\r\n                <div className=\"endDateInput\"> \r\n                <input\r\n                    type=\"month\"\r\n                    name=\"end\"\r\n                    data-workid={work.id}\r\n                    onChange={props.updateWork}\r\n                />\r\n                <div>\r\n                    <input \r\n                        type=\"checkbox\"\r\n                        data-workid={work.id}\r\n                        onClick={props.updatePresent}/>\r\n                    <label> Present </label>\r\n                </div>\r\n              </div>\r\n                <DescriptionInput\r\n                  id={work.id}\r\n                  descriptionList={work.descriptionList}\r\n                  addDescription={props.addDescription} \r\n                  deleteDescription={props.deleteDescription}\r\n                  updateDescription={props.updateDescription}/>\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n          \r\n\r\n          <button className=\"addButton\" onClick={props.addWork}> Add Work </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkDetailsInput","import DescriptionInput from \"./descriptionInput\"\r\n\r\nconst AddInfoInput = (props) =>{\r\n    return(\r\n        <div className=\"inputContainer\">\r\n          <h2> Additional Information </h2>\r\n          <DescriptionInput\r\n           descriptionList={props.descriptionList} \r\n           addDescription={props.addDescription} \r\n           deleteDescription={props.deleteDescription}\r\n           updateDescription={props.updateDescription}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddInfoInput","const ResumeHeader = (props) => {\r\n    return(\r\n        <div className=\"resumeHeader\">\r\n          <h1>{props.personalInfo.name}</h1>\r\n          <span>{props.personalInfo.phoneNumber}</span>\r\n          <span>{props.personalInfo.email}</span>\r\n          <span>{props.personalInfo.website}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResumeHeader","const EducationSection = (props) => {\r\n    return(\r\n        <div className=\"sectionWithItems\">\r\n          <h3> EDUCATION </h3>\r\n          {props.schoolList.map(school => {\r\n            const startDate = new Date(school.start).toLocaleDateString(\"en-us\", {year:\"numeric\", month:\"short\"})\r\n            const endDate = new Date(school.end).toLocaleDateString(\"en-us\", {year:\"numeric\", month:\"short\"})\r\n            return(\r\n              <div className=\"sectionItem\" key={school.id}>\r\n                <div className=\"itemHeader\">\r\n                  <b> {school.schoolName} </b>\r\n                  <b className=\"dates\"> \r\n                    {startDate} to {(school.present ? \"Present\" : endDate)}\r\n                  </b>\r\n                </div>\r\n                <div className=\"itemSubheader\">\r\n                  <span> {school.course} </span>\r\n                </div>\r\n                <div className=\"itemDescription\">\r\n                  <ul>\r\n                    <li> {school.cap} </li>\r\n                    {school.descriptionList.map(description => {\r\n                      return(\r\n                        <li key={description.id} data-descriptionid={description.id}> {description.text} </li>\r\n                      )\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n            )\r\n          })}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EducationSection","import DescriptionInput from \"./descriptionInput\"\r\nimport React from \"react\"\r\n\r\nconst CcaDetailsInput = (props) => {\r\n    return(\r\n        <div className=\"inputContainer\">\r\n          <h2> Co-Curricular Activities </h2>\r\n          {props.ccaList.map(cca => {\r\n            return(\r\n              <React.Fragment key={cca.id}>\r\n                <label> \r\n                <div>\r\n                  Organisation\r\n                  <button \r\n                    className=\"deleteButton\"\r\n                    data-ccaid={cca.id}\r\n                    onClick={props.deleteCca}\r\n                  > Delete CCA </button>\r\n                </div> \r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"organisation\"\r\n                  data-ccaid={cca.id}\r\n                  onChange={props.updateCca}\r\n                />\r\n                <label> Position </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"position\"\r\n                  data-ccaid={cca.id}\r\n                  onChange={props.updateCca}\r\n                />\r\n                <label> Start Date </label>\r\n                <input\r\n                  type=\"month\"\r\n                  name=\"start\"\r\n                  data-ccaid={cca.id}\r\n                  onChange={props.updateCca}\r\n                />\r\n                <label> End Date </label>\r\n                <div className=\"endDateInput\"> \r\n                <input\r\n                    type=\"month\"\r\n                    name=\"end\"\r\n                    data-ccaid={cca.id}\r\n                    onChange={props.updateCca}\r\n                />\r\n                <div>\r\n                    <input \r\n                        type=\"checkbox\"\r\n                        data-ccaid={cca.id}\r\n                        onClick={props.updatePresent}/>\r\n                    <label> Present </label>\r\n                </div>\r\n              </div>\r\n                <DescriptionInput\r\n                  id={cca.id}\r\n                  descriptionList={cca.descriptionList}\r\n                  addDescription={props.addDescription} \r\n                  deleteDescription={props.deleteDescription}\r\n                  updateDescription={props.updateDescription}/>\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n          \r\n\r\n          <button className=\"addButton\" onClick={props.addCca}> Add CCA </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CcaDetailsInput","const WorkSection = (props) => {\r\n    return(\r\n        <div className=\"sectionWithItems\">\r\n          <h3> WORKING EXPERIENCE </h3>\r\n          {props.workList.map(work => {\r\n            const startDate = new Date(work.start).toLocaleDateString(\"en-us\", {year:\"numeric\", month:\"short\"})\r\n            const endDate = new Date(work.end).toLocaleDateString(\"en-us\", {year:\"numeric\", month:\"short\"})\r\n            return(\r\n              <div className=\"sectionItem\" key={work.id}>\r\n                <div className=\"itemHeader\">\r\n                  <b> {work.company} </b>\r\n                  <b className=\"dates\"> \r\n                    {startDate} to {work.present ? \"Present\" : endDate}\r\n                  </b>\r\n                </div>\r\n                <div className=\"itemSubheader\">\r\n                  <span> {work.jobTitle} </span>\r\n                </div>\r\n                <div className=\"itemDescription\">\r\n                  <ul>\r\n                    {work.descriptionList.map(description => {\r\n                      return(\r\n                        <li key={description.id} data-descriptionid={description.id}> {description.text} </li>\r\n                      )\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n            )\r\n          })}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkSection","const CcaSection = (props) => {\r\n    return(\r\n        <div className=\"sectionWithItems\">\r\n          <h3> CO-CURRICULAR ACTIVITIES </h3>\r\n          {props.ccaList.map(cca => {\r\n            const startDate = new Date(cca.start).toLocaleDateString(\"en-us\", {year:\"numeric\", month:\"short\"})\r\n            const endDate = new Date(cca.end).toLocaleDateString(\"en-us\", {year:\"numeric\", month:\"short\"})\r\n            return(\r\n              <div className=\"sectionItem\" key={cca.id}>\r\n                <div className=\"itemHeader\">\r\n                  <b> {cca.organisation} </b>\r\n                  <b className=\"dates\"> \r\n                    {startDate} to {(cca.present ? \"Present\" : endDate)}\r\n                  </b>\r\n                </div>\r\n                <div className=\"itemSubheader\">\r\n                  <span> {cca.position} </span>\r\n                </div>\r\n                <div className=\"itemDescription\">\r\n                  <ul>\r\n                    {cca.descriptionList.map(description => {\r\n                      return(\r\n                        <li key={description.id} data-descriptionid={description.id}> {description.text} </li>\r\n                      )\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n\r\n            )\r\n          })}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CcaSection","const AddInfoSection = (props) => {\r\n    return(\r\n        <div className=\"addInfoSection\">\r\n            <h3> ADDITIONAL INFORMATION </h3>\r\n            <div className=\"itemDescription\">\r\n                <ul>\r\n                    {props.addInfoList.map(info => {\r\n                        return(\r\n                            <li key={info.id} data-descriptionid={info.id}> {info.text} </li>\r\n                        )})}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddInfoSection","import React, { useState } from \"react\";\nimport \"./styles/styles.css\"\nimport PersonalDetailsInput from \"./components/personalDetailsInput.js\"\nimport EducationDetailsInput from \"./components/educationDetailsInput.js\"\nimport WorkDetailsInput from \"./components/workDetailsInput.js\"\nimport AddInfoInput from \"./components/addInfoInput.js\"\nimport uniqid from \"uniqid\"\nimport ResumeHeader from \"./components/resumeHeader\";\nimport EducationSection from \"./components/educationSection\"\nimport CcaDetailsInput from \"./components/ccaDetailsInput\";\nimport update from \"immutability-helper\"\nimport WorkSection from \"./components/workSection\";\nimport CcaSection from \"./components/ccaSection\";\nimport AddInfoSection from \"./components/addInfoSection\";\n\nconst App = () => {\n\n  const [personalInfo, setPersonalInfo] = useState({\n    name: \"Foh Cher Ern Don\",\n    phoneNumber: \"\",\n    email: \"don.foh@u.nus.edu\",\n    website: \"linkedin.com/in/don-foh\"})\n\n    const updatePersonalInfo = (ev) => {\n      const value = ev.target.value\n      setPersonalInfo({\n        ...personalInfo,\n        [ev.target.name]: value\n      })\n    }\n\n  const [educationInfo, setEducationInfo] = useState(\n    [{schoolName:\"National University of Singapore\", \n    id: uniqid(), \n    start: \"Aug 2019\",\n    end: \"Jan 2024\",\n    present: true,\n    course: \"Bachelor of Business Administration, Specialisation in Business Analytics\",\n    cap: \"CAP: 4.5/5 (First Class Honours)\",\n    descriptionList: [\n      {id:uniqid(), text:\"Case competitions: SparkTank X 2021 (Semi-Finalist) | SGX NUS Sustainability 2021 | NUS-SGX Stock Pitch Competition\"},\n      {id: uniqid(), text:\"Projects: commentaR - An R Shiny App to automate sentiment analysis of any Youtube video’s comments \"}]}]\n  )\n\n  const updatePresentSchool = (ev) => {\n    const index = educationInfo.findIndex(school => school.id === ev.target.dataset.schoolid)\n\n    setEducationInfo(\n      update(educationInfo, {\n        [index] : {\n          present : {$set: educationInfo[index].present ? false : true}\n        }\n      })\n    )\n  }\n\n \n  const addSchool = () => {\n    setEducationInfo([\n      ...educationInfo, {\n        schoolName:\"New School\", \n        id: uniqid(), \n        start: Date.now(),\n        end: Date.now(),\n        course: \"Course Name\",\n        cap: \"CAP: \",\n        descriptionList: [{id:uniqid(), text:\"Description\"}]}\n    ])\n  }\n  \n  const deleteSchool = (ev) => {\n    setEducationInfo(\n      educationInfo.filter(school => school.id !== ev.target.dataset.schoolid)\n    )\n  }\n\n  const addSchoolDescription = (ev) => {\n    const index = educationInfo.findIndex(school => school.id === ev.target.dataset.parentid)\n\n    setEducationInfo(\n      update(educationInfo, {\n        [index] : {\n          descriptionList : {$push: [{id:uniqid(), text:\"Description\"}]}\n        }\n      })\n    )\n  }\n\n  const deleteSchoolDescription = (ev) => {\n    const index = educationInfo.findIndex(school => school.id === ev.target.dataset.parentid)\n\n    setEducationInfo(\n      update(educationInfo, {\n        [index] : {\n          descriptionList : {$set: educationInfo[index].descriptionList.filter(description => description.id !== ev.target.dataset.descriptionid)}\n        }\n      })\n    )\n  }\n\n  const updateSchool = (ev) => {\n    const index = educationInfo.findIndex(school => school.id === ev.target.dataset.schoolid)\n\n    setEducationInfo(\n      update(educationInfo, {\n        [index] : {\n          [ev.target.name] : {$set: ev.target.value}\n        }\n      })\n    )\n  }\n\n const updateSchoolDescription = (ev) => {\n    const index = educationInfo.findIndex(school => school.id === ev.target.dataset.parentid)\n    const descripIndex = educationInfo[index].descriptionList.findIndex(description => description.id === ev.target.dataset.descriptionid)\n    setEducationInfo(\n      update(educationInfo, {\n        [index] : {\n          descriptionList : {\n            [descripIndex] : {\n              text: {$set: ev.target.value}\n            }\n          }\n        }\n      })\n    )\n  }\n\n  const [workInfo, setWorkInfo] = useState(\n    [{company:\"Saturday Kids\", \n    id: uniqid(), \n    start: \"May 2019\",\n    end: \"Jun 2019\",\n    present: false,\n    jobTitle: \"Teaching Assistant (Python) - Code in the Community\",\n    descriptionList: [\n      {id:uniqid(), \n      text:\"Conducted Python lessons as a substitute teacher, teaching a class of underprivileged 20-30 students aged between 13-16 basic programming skills \"},\n      {id:uniqid(),\n      text:\"Worked with Instructors to provide students with meaningful and prompt feedback on their progress, clarifying any Python-related doubts or confusion\"}]}]\n  )\n\n  const updatePresentWork = (ev) => {\n    const index = workInfo.findIndex(work => work.id === ev.target.dataset.workid)\n\n    setWorkInfo(\n      update(workInfo, {\n        [index] : {\n          present : {$set: workInfo[index].present ? false : true}\n        }\n      })\n    )\n  }\n\n  const addWork = () => {\n    setWorkInfo([\n      ...workInfo, {\n        company: \"Company\",\n        id: uniqid(),\n        start: Date.now(),\n        end: Date.now(),\n        jobTitle: \"Position\",\n        descriptionList: [{id:uniqid(), text:\"Description\"}]\n      }\n    ])\n  }\n \n  const deleteWork = (ev) => {\n    setWorkInfo(\n      workInfo.filter(work => work.id !== ev.target.dataset.workid)\n    )\n  }\n\n  const addWorkDescription = (ev) => {\n    const index = workInfo.findIndex(work => work.id === ev.target.dataset.parentid)\n\n    setWorkInfo(\n      update(workInfo, {\n        [index] : {\n          descriptionList : {$push: [{id:uniqid(), text:\"Description\"}]}\n        }\n      })\n    )\n  }\n\n  const deleteWorkDescription = (ev) => {\n    const index = workInfo.findIndex(work => work.id === ev.target.dataset.parentid)\n\n    setWorkInfo(\n      update(workInfo, {\n        [index] : {\n          descriptionList : {$set: workInfo[index].descriptionList.filter(description => description.id !== ev.target.dataset.descriptionid)}\n        }\n      })\n    )\n  }\n\n  const updateWork = (ev) => {\n    const index = workInfo.findIndex(work => work.id === ev.target.dataset.workid)\n\n    setWorkInfo(\n      update(workInfo, {\n        [index] : {\n          [ev.target.name] : {$set: ev.target.value}\n        }\n      })\n    )\n  }\n\n const updateWorkDescription = (ev) => {\n    const index = workInfo.findIndex(work => work.id === ev.target.dataset.parentid)\n    const descripIndex = workInfo[index].descriptionList.findIndex(description => description.id === ev.target.dataset.descriptionid)\n    setWorkInfo(\n      update(workInfo, {\n        [index] : {\n          descriptionList : {\n            [descripIndex] : {\n              text: {$set: ev.target.value}\n            }\n          }\n        }\n      })\n    )\n  }\n\n  const [ccaInfo, setCcaInfo] = useState(\n    [{organisation:\"NUS Business Analytics Consulting Team\", \n    id: uniqid(), \n    start: \"Aug 2021\",\n    end: \"May 2022\",\n    present: true,\n    position: \"Junior Analyst\",\n    descriptionList: [\n      {id:uniqid(), \n      text:\"Explored data analytics techniques, including machine learning, data visualization, web scraping and time-series analysis \"},\n      {id: uniqid(),\n      text: \"Researched and presented data analytics techniques, helping to improve other members’ understanding\" }]},\n    {organisation: \"NUS Business Club\",\n    id: uniqid(),\n    start: \"Oct 2019\",\n    end: \"Sep 2020\",\n    present: true,\n    position: \"Logistics Head - NUS Business Camp\",\n    descriptionList: [\n      {id:uniqid(), \n      text:\"Headed a committee of 9 to prepare logistics for the faculty camp with over 400 participants\"},\n      {id: uniqid(),\n      text: \"Conducted in-depth cost-benefit analysis through use of Excel functions to optimize budget allocation, reducing financial expenditure by ~20% from past year\" },\n      {id: uniqid(),\n      text: \"Planned and executed logistics plan to store and deliver required equipment on schedule \"},\n      {id: uniqid(),\n       text: \"Liaised with respective stakeholders to ensure smooth delivery of logistics\"}\n    ]}]\n  )\n\n  const updatePresentCca = (ev) => {\n    const index = ccaInfo.findIndex(cca => cca.id === ev.target.dataset.ccaid)\n\n    setCcaInfo(\n      update(ccaInfo, {\n        [index] : {\n          present : {$set: ccaInfo[index].present ? false : true}\n        }\n      })\n    )\n  }\n\n\n  const addCca = () => {\n    setCcaInfo([\n      ...ccaInfo, {\n        organisation: \"CCA\",\n        id: uniqid(),\n        start: Date.now(),\n        end: Date.now(),\n        position: \"Position\",\n        descriptionList: [{id:uniqid(), text:\"Description\"}]\n      }\n    ])\n  }\n \n  const deleteCca = (ev) => {\n    setCcaInfo(\n      ccaInfo.filter(cca => cca.id !== ev.target.dataset.ccaid)\n    )\n  }\n\n  const addCcaDescription = (ev) => {\n    const index = ccaInfo.findIndex(cca => cca.id === ev.target.dataset.parentid)\n\n    setCcaInfo(\n      update(ccaInfo, {\n        [index] : {\n          descriptionList : {$push: [{id:uniqid(), text:\"Description\"}]}\n        }\n      })\n    )\n  }\n\n  const deleteCcaDescription = (ev) => {\n    const index = ccaInfo.findIndex(cca => cca.id === ev.target.dataset.parentid)\n\n    setCcaInfo(\n      update(ccaInfo, {\n        [index] : {\n          descriptionList : {$set: ccaInfo[index].descriptionList.filter(description => description.id !== ev.target.dataset.descriptionid)}\n        }\n      })\n    )\n  }\n\n  const updateCca = (ev) => {\n    const index = ccaInfo.findIndex(cca => cca.id === ev.target.dataset.ccaid)\n\n    setCcaInfo(\n      update(ccaInfo, {\n        [index] : {\n          [ev.target.name] : {$set: ev.target.value}\n        }\n      })\n    )\n  }\n\n const updateCcaDescription = (ev) => {\n    const index = ccaInfo.findIndex(cca => cca.id === ev.target.dataset.parentid)\n    const descripIndex = ccaInfo[index].descriptionList.findIndex(description => description.id === ev.target.dataset.descriptionid)\n    setCcaInfo(\n      update(ccaInfo, {\n        [index] : {\n          descriptionList : {\n            [descripIndex] : {\n              text: {$set: ev.target.value}\n            }\n          }\n        }\n      })\n    )\n  }\n\n  const [addInfo, setAddInfo] = useState([\n    {id: uniqid(), text: \"Interests: Piano, basketball, fencing, reading\"},\n    {id: uniqid(), text: \"Programming Languages: Python, R, JavaScript, HTML, CSS, SQL, NoSQL, Ruby\"},\n    {id: uniqid(), text: \"Technical Skills: Data Analysis, Data Visualization, Web Scraping, Sentiment Analysis, Web Development\"},\n    {id: uniqid(), text: \"Design: Adobe Illustrator, Wireframing, Prototyping\"},\n    {id: uniqid(), text: \"Tools and Playforms: MongoDB, PostgreSQL, IBM SPSS, Microsoft Excel (Pivot Tables, VLOOKUP)\"},\n    {id: uniqid(), text: \"Languages: English, Malay, Mandarin/Hokkien\"},\n    {id: uniqid(), text: \"Relevant modules: NM2207 (Computational Media Literacy) | NM2103 (Quantitative Research Methods) | DAO2702 (Programming for Business Analytics) | DBA3702 (Descriptive Analytics with R) | IT3010 (Data Management for Business Analytics) | NM3221 (Mobile Interaction Design) | NM3239Y (Retrieving, Exploring and Analysing Data)\"}])\n\n  const addAddInfo = () => {\n    setAddInfo([\n      ...addInfo, {id: uniqid(), text:\"Description\"}\n    ])\n\n  }\n\n  const deleteAddInfo = (ev) => {\n\n    setAddInfo(\n      addInfo.filter(info => info.id !== ev.target.dataset.descriptionid)\n    )\n  }\n\n  const updateAddInfo = (ev) => {\n    const index = addInfo.findIndex(info => info.id === ev.target.dataset.descriptionid)\n    setAddInfo(update(addInfo, {\n      [index] : {\n        text: {$set: ev.target.value}\n      }\n    }))\n  }\n\n  return(\n    <div className=\"App\">\n      <div className=\"detailInput\">\n        <h3> Input details below </h3>\n        <PersonalDetailsInput\n          updatePersonalInfo={updatePersonalInfo}/>\n\n        <EducationDetailsInput \n          schoolList={educationInfo} \n          updatePresent={updatePresentSchool}\n          addSchool={addSchool} \n          deleteSchool={deleteSchool}\n          updateSchool={updateSchool} \n          addDescription={addSchoolDescription} \n          deleteDescription={deleteSchoolDescription}\n          updateDescription={updateSchoolDescription}/>\n\n        <WorkDetailsInput\n          workList={workInfo}\n          addWork={addWork}\n          updatePresent={updatePresentWork}\n          deleteWork={deleteWork}\n          updateWork={updateWork} \n          addDescription={addWorkDescription} \n          deleteDescription={deleteWorkDescription}\n          updateDescription={updateWorkDescription}/>\n\n        <CcaDetailsInput\n          ccaList={ccaInfo}\n          updatePresent={updatePresentCca}\n          addCca={addCca}\n          deleteCca={deleteCca}\n          updateCca={updateCca} \n          addDescription={addCcaDescription} \n          deleteDescription={deleteCcaDescription}\n          updateDescription={updateCcaDescription}/> \n\n        <AddInfoInput\n          descriptionList={addInfo}\n          addDescription={addAddInfo}\n          deleteDescription={deleteAddInfo}\n          updateDescription={updateAddInfo}/>\n\n      </div>\n      <div className=\"resume\">\n        <ResumeHeader\n          personalInfo={personalInfo} />\n        <EducationSection\n          schoolList={educationInfo} />\n        <WorkSection\n          workList={workInfo} />\n        \n        <CcaSection\n          ccaList={ccaInfo}/>\n\n        <AddInfoSection\n          addInfoList={addInfo}/>\n          \n      </div>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}